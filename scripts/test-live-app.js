#!/usr/bin/env node
/**
 * Comprehensive Live Application Test Suite
 * Tests https://modern-tco.vercel.app/tanium for full functionality
 * Generated by Claude Code for session documentation
 */

const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

// Test configuration
const BASE_URL = 'https://modern-tco.vercel.app/tanium';
const TIMEOUT = 30000;
const RESULTS_FILE = 'docs/knowledge-base/LIVE_APP_TEST_RESULTS.md';

// Test results storage
let testResults = {
  timestamp: new Date().toISOString(),
  url: BASE_URL,
  browser: 'Chromium (WSL2 Headless)',
  environment: 'WSL2 Ubuntu 24.04.2',
  tests: [],
  summary: {
    total: 0,
    passed: 0,
    failed: 0,
    warnings: 0
  }
};

// Utility functions
function addTest(name, status, details, screenshot = null) {
  const test = {
    name,
    status, // 'PASS', 'FAIL', 'WARN'
    details,
    screenshot,
    timestamp: new Date().toISOString()
  };
  testResults.tests.push(test);
  testResults.summary.total++;
  if (status === 'PASS') testResults.summary.passed++;
  else if (status === 'FAIL') testResults.summary.failed++;
  else if (status === 'WARN') testResults.summary.warnings++;

  console.log(`${status === 'PASS' ? '✅' : status === 'FAIL' ? '❌' : '⚠️'} ${name}: ${details}`);
}

async function takeScreenshot(page, name) {
  try {
    const screenshotPath = `docs/screenshots/test-${Date.now()}-${name.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.png`;
    await page.screenshot({ path: screenshotPath, fullPage: false });
    return screenshotPath;
  } catch (error) {
    console.log(`Failed to take screenshot for ${name}:`, error.message);
    return null;
  }
}

async function waitForElement(page, selector, timeout = 10000) {
  try {
    await page.waitForSelector(selector, { timeout });
    return true;
  } catch (error) {
    return false;
  }
}

async function runTests() {
  console.log('🚀 Starting Comprehensive Live Application Test Suite');
  console.log('=' .repeat(60));
  console.log(`🌐 Testing URL: ${BASE_URL}`);
  console.log(`🕒 Started: ${new Date().toLocaleString()}`);
  console.log('');

  let browser, page;

  try {
    // Launch browser with WSL2 optimizations
    browser = await chromium.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--headless=new',
        '--disable-web-security',
        '--no-first-run',
        '--disable-extensions'
      ]
    });

    const context = await browser.newContext({
      viewport: { width: 1920, height: 1080 },
      userAgent: 'Claude Code Test Suite (WSL2/Chromium)'
    });

    page = await context.newPage();

    // Enable request/response logging
    page.on('response', response => {
      if (!response.ok()) {
        console.log(`❌ Failed request: ${response.status()} ${response.url()}`);
      }
    });

    console.log('🎯 Test Phase 1: Initial Page Load & Core Infrastructure');
    console.log('-'.repeat(50));

    // Test 1: Initial page load
    const startTime = Date.now();
    try {
      await page.goto(BASE_URL, { waitUntil: 'networkidle', timeout: TIMEOUT });
      const loadTime = Date.now() - startTime;
      addTest('Initial Page Load', 'PASS', `Loaded in ${loadTime}ms`, await takeScreenshot(page, 'initial-load'));

      if (loadTime > 5000) {
        addTest('Load Performance', 'WARN', `Slow load time: ${loadTime}ms (>5s)`);
      } else {
        addTest('Load Performance', 'PASS', `Good load time: ${loadTime}ms (<5s)`);
      }
    } catch (error) {
      addTest('Initial Page Load', 'FAIL', `Failed to load: ${error.message}`);
      return; // Can't continue if page doesn't load
    }

    // Test 2: Page title and meta information
    const title = await page.title();
    if (title && title.length > 0) {
      addTest('Page Title', 'PASS', `Title: "${title}"`);
    } else {
      addTest('Page Title', 'FAIL', 'No page title found');
    }

    // Test 3: Basic HTML structure
    const bodyExists = await page.$('body');
    if (bodyExists) {
      addTest('HTML Structure', 'PASS', 'Valid HTML body element found');
    } else {
      addTest('HTML Structure', 'FAIL', 'No body element found');
    }

    // Test 4: React/Next.js hydration
    await page.waitForTimeout(2000); // Wait for hydration
    const reactRoot = await page.$('[data-reactroot], #__next, #root');
    if (reactRoot) {
      addTest('React Hydration', 'PASS', 'React root element detected');
    } else {
      addTest('React Hydration', 'WARN', 'React root element not clearly identified');
    }

    console.log('');
    console.log('🎯 Test Phase 2: UI Components & Navigation');
    console.log('-'.repeat(50));

    // Test 5: Main navigation
    const navElements = await page.$$('nav, [role="navigation"], .navigation, .navbar, .nav');
    if (navElements.length > 0) {
      addTest('Navigation Components', 'PASS', `Found ${navElements.length} navigation element(s)`);
    } else {
      addTest('Navigation Components', 'WARN', 'No navigation elements clearly identified');
    }

    // Test 6: Main content areas
    const mainContent = await page.$('main, [role="main"], .main-content, .content');
    if (mainContent) {
      addTest('Main Content Area', 'PASS', 'Main content container found');
    } else {
      addTest('Main Content Area', 'WARN', 'Main content container not clearly identified');
    }

    // Test 7: Interactive elements
    const buttons = await page.$$('button, [role="button"], .button, .btn');
    const links = await page.$$('a[href]');
    addTest('Interactive Elements', 'PASS', `Found ${buttons.length} buttons and ${links.length} links`);

    // Test 8: Form elements (for assessment system)
    const forms = await page.$$('form, .form');
    const inputs = await page.$$('input, textarea, select');
    if (forms.length > 0 || inputs.length > 0) {
      addTest('Form Elements', 'PASS', `Found ${forms.length} forms and ${inputs.length} input elements`);
    } else {
      addTest('Form Elements', 'WARN', 'No form elements detected');
    }

    console.log('');
    console.log('🎯 Test Phase 3: Tanium TCO Specific Features');
    console.log('-'.repeat(50));

    // Test 9: Look for TCO-specific content
    const pageText = await page.textContent('body');
    const tcoKeywords = ['tanium', 'tco', 'assessment', 'exam', 'practice', 'certification'];
    const foundKeywords = tcoKeywords.filter(keyword =>
      pageText.toLowerCase().includes(keyword.toLowerCase())
    );

    if (foundKeywords.length > 0) {
      addTest('TCO Content Recognition', 'PASS', `Found TCO keywords: ${foundKeywords.join(', ')}`);
    } else {
      addTest('TCO Content Recognition', 'WARN', 'No obvious TCO-related content detected');
    }

    // Test 10: Assessment/Exam interface elements
    const examElements = await page.$$('[class*="exam"], [class*="assessment"], [class*="question"], [class*="quiz"]');
    if (examElements.length > 0) {
      addTest('Assessment Interface', 'PASS', `Found ${examElements.length} assessment-related elements`);
    } else {
      addTest('Assessment Interface', 'WARN', 'No obvious assessment interface elements found');
    }

    // Test 11: Progress tracking elements
    const progressElements = await page.$$('[class*="progress"], .progress-bar, [role="progressbar"]');
    if (progressElements.length > 0) {
      addTest('Progress Tracking', 'PASS', `Found ${progressElements.length} progress tracking elements`);
    } else {
      addTest('Progress Tracking', 'WARN', 'No progress tracking elements detected');
    }

    console.log('');
    console.log('🎯 Test Phase 4: Technical Implementation & Performance');
    console.log('-'.repeat(50));

    // Test 12: JavaScript execution
    try {
      const jsTest = await page.evaluate(() => {
        return {
          hasReact: typeof window.React !== 'undefined',
          hasNext: typeof window.next !== 'undefined' || typeof window.__NEXT_DATA__ !== 'undefined',
          hasJQuery: typeof window.$ !== 'undefined',
          userAgent: navigator.userAgent,
          viewport: { width: window.innerWidth, height: window.innerHeight },
          darkMode: document.documentElement.classList.contains('dark') ||
                   document.body.classList.contains('dark')
        };
      });

      addTest('JavaScript Execution', 'PASS', `JS environment functional`);
      if (jsTest.hasNext) {
        addTest('Next.js Detection', 'PASS', 'Next.js framework detected');
      }
      if (jsTest.darkMode) {
        addTest('Dark Mode Support', 'PASS', 'Dark mode implementation detected');
      }

    } catch (error) {
      addTest('JavaScript Execution', 'FAIL', `JS execution failed: ${error.message}`);
    }

    // Test 13: Network performance
    const networkRequests = [];
    page.on('response', response => {
      networkRequests.push({
        url: response.url(),
        status: response.status(),
        type: response.request().resourceType()
      });
    });

    await page.reload({ waitUntil: 'networkidle' });

    const failedRequests = networkRequests.filter(req => req.status >= 400);
    if (failedRequests.length === 0) {
      addTest('Network Requests', 'PASS', `All ${networkRequests.length} requests successful`);
    } else {
      addTest('Network Requests', 'WARN', `${failedRequests.length}/${networkRequests.length} requests failed`);
    }

    // Test 14: CSS and styling
    const stylesheets = await page.$$('link[rel="stylesheet"], style');
    const hasStyles = await page.evaluate(() => {
      const computedStyle = window.getComputedStyle(document.body);
      return computedStyle.color !== '' || computedStyle.backgroundColor !== '';
    });

    if (stylesheets.length > 0 && hasStyles) {
      addTest('CSS Styling', 'PASS', `${stylesheets.length} stylesheets loaded, styling applied`);
    } else {
      addTest('CSS Styling', 'WARN', 'Styling issues detected');
    }

    console.log('');
    console.log('🎯 Test Phase 5: Accessibility & Mobile Responsiveness');
    console.log('-'.repeat(50));

    // Test 15: Basic accessibility
    const accessibilityElements = {
      headings: await page.$$('h1, h2, h3, h4, h5, h6'),
      altImages: await page.$$('img[alt]'),
      ariaLabels: await page.$$('[aria-label]'),
      focusableElements: await page.$$('a, button, input, select, textarea, [tabindex]')
    };

    addTest('Accessibility Elements', 'PASS',
      `${accessibilityElements.headings.length} headings, ${accessibilityElements.altImages.length} alt images, ${accessibilityElements.ariaLabels.length} ARIA labels, ${accessibilityElements.focusableElements.length} focusable elements`);

    // Test 16: Mobile responsiveness
    await page.setViewportSize({ width: 375, height: 667 }); // iPhone viewport
    await page.waitForTimeout(1000);

    const mobileScreenshot = await takeScreenshot(page, 'mobile-view');
    addTest('Mobile Responsiveness', 'PASS', 'Mobile viewport test completed', mobileScreenshot);

    // Reset to desktop viewport
    await page.setViewportSize({ width: 1920, height: 1080 });

    console.log('');
    console.log('🎯 Test Phase 6: Advanced Features & Integration Tests');
    console.log('-'.repeat(50));

    // Test 17: Local storage and session management
    try {
      await page.evaluate(() => {
        localStorage.setItem('test-key', 'test-value');
        sessionStorage.setItem('session-test', 'session-value');
      });

      const storageTest = await page.evaluate(() => ({
        localStorage: localStorage.getItem('test-key'),
        sessionStorage: sessionStorage.getItem('session-test'),
        localStorageKeys: Object.keys(localStorage).length,
        sessionStorageKeys: Object.keys(sessionStorage).length
      }));

      if (storageTest.localStorage === 'test-value') {
        addTest('Browser Storage', 'PASS',
          `Storage functional - ${storageTest.localStorageKeys} localStorage, ${storageTest.sessionStorageKeys} sessionStorage items`);
      }
    } catch (error) {
      addTest('Browser Storage', 'FAIL', `Storage test failed: ${error.message}`);
    }

    // Test 18: Error handling
    const errorLogs = [];
    page.on('pageerror', error => errorLogs.push(error));
    page.on('console', msg => {
      if (msg.type() === 'error') errorLogs.push(msg.text());
    });

    await page.waitForTimeout(2000);

    if (errorLogs.length === 0) {
      addTest('Error Handling', 'PASS', 'No JavaScript errors detected');
    } else {
      addTest('Error Handling', 'WARN', `${errorLogs.length} JavaScript errors found`);
    }

    // Test 19: Final comprehensive screenshot
    const finalScreenshot = await takeScreenshot(page, 'final-comprehensive-view');
    addTest('Final Documentation', 'PASS', 'Comprehensive testing completed', finalScreenshot);

  } catch (error) {
    addTest('Test Suite Execution', 'FAIL', `Critical error: ${error.message}`);
    console.error('Critical test suite error:', error);
  } finally {
    if (browser) {
      await browser.close();
    }
  }

  // Generate and save report
  await generateReport();
}

async function generateReport() {
  console.log('');
  console.log('📊 Test Results Summary');
  console.log('=' .repeat(60));
  console.log(`✅ Passed: ${testResults.summary.passed}`);
  console.log(`❌ Failed: ${testResults.summary.failed}`);
  console.log(`⚠️  Warnings: ${testResults.summary.warnings}`);
  console.log(`📝 Total Tests: ${testResults.summary.total}`);
  console.log(`🎯 Success Rate: ${((testResults.summary.passed / testResults.summary.total) * 100).toFixed(1)}%`);

  // Create markdown report
  let markdown = `# Live Application Test Results\n\n`;
  markdown += `**Application**: ${testResults.url}\n`;
  markdown += `**Test Date**: ${new Date(testResults.timestamp).toLocaleString()}\n`;
  markdown += `**Environment**: ${testResults.environment}\n`;
  markdown += `**Browser**: ${testResults.browser}\n\n`;

  markdown += `## Summary\n\n`;
  markdown += `| Status | Count |\n`;
  markdown += `|--------|-------|\n`;
  markdown += `| ✅ Passed | ${testResults.summary.passed} |\n`;
  markdown += `| ❌ Failed | ${testResults.summary.failed} |\n`;
  markdown += `| ⚠️ Warnings | ${testResults.summary.warnings} |\n`;
  markdown += `| **Total** | **${testResults.summary.total}** |\n`;
  markdown += `| **Success Rate** | **${((testResults.summary.passed / testResults.summary.total) * 100).toFixed(1)}%** |\n\n`;

  markdown += `## Detailed Test Results\n\n`;

  testResults.tests.forEach((test, index) => {
    const emoji = test.status === 'PASS' ? '✅' : test.status === 'FAIL' ? '❌' : '⚠️';
    markdown += `### ${index + 1}. ${emoji} ${test.name}\n\n`;
    markdown += `**Status**: ${test.status}\n\n`;
    markdown += `**Details**: ${test.details}\n\n`;
    if (test.screenshot) {
      markdown += `**Screenshot**: ![${test.name}](../${test.screenshot})\n\n`;
    }
    markdown += `**Timestamp**: ${new Date(test.timestamp).toLocaleString()}\n\n`;
    markdown += `---\n\n`;
  });

  markdown += `## Recommendations for Other Sessions\n\n`;
  markdown += `### Key Findings:\n`;

  const criticalFailures = testResults.tests.filter(t => t.status === 'FAIL');
  const warnings = testResults.tests.filter(t => t.status === 'WARN');

  if (criticalFailures.length > 0) {
    markdown += `\n**🚨 Critical Issues** (${criticalFailures.length}):\n`;
    criticalFailures.forEach(test => {
      markdown += `- ${test.name}: ${test.details}\n`;
    });
  }

  if (warnings.length > 0) {
    markdown += `\n**⚠️ Areas for Attention** (${warnings.length}):\n`;
    warnings.forEach(test => {
      markdown += `- ${test.name}: ${test.details}\n`;
    });
  }

  markdown += `\n### Overall Assessment:\n\n`;
  const successRate = (testResults.summary.passed / testResults.summary.total) * 100;

  if (successRate >= 90) {
    markdown += `🟢 **EXCELLENT** - Application is performing very well with minimal issues.\n`;
  } else if (successRate >= 75) {
    markdown += `🟡 **GOOD** - Application is functional with some areas for improvement.\n`;
  } else if (successRate >= 50) {
    markdown += `🟠 **FAIR** - Application has significant issues that need attention.\n`;
  } else {
    markdown += `🔴 **POOR** - Application has critical issues requiring immediate attention.\n`;
  }

  markdown += `\n---\n\n`;
  markdown += `*Report generated by Claude Code Comprehensive Test Suite*\n`;
  markdown += `*Generated on: ${new Date().toLocaleString()}*\n`;

  // Ensure directory exists
  const reportsDir = path.dirname(RESULTS_FILE);
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }

  // Write report
  fs.writeFileSync(RESULTS_FILE, markdown, 'utf8');

  console.log('');
  console.log(`📄 Detailed report saved to: ${RESULTS_FILE}`);
  console.log('🎉 Comprehensive testing completed!');
}

// Run the test suite
runTests().catch(console.error);