#!/usr/bin/env node

/**
 * Supabase Environment Setup - Complete Automation
 * Solves session persistence, environment management, and credential automation
 */

const fs = require("fs");
const path = require("path");
const { spawn, exec } = require("child_process");
const os = require("os");

class SupabaseEnvironmentManager {
  constructor() {
    this.projectRoot = path.resolve(__dirname, "../..");
    this.scriptsDir = __dirname;
    this.envFiles = {
      local: path.join(this.projectRoot, ".env.local"),
      dev: path.join(this.projectRoot, ".env"),
      backup: path.join(this.projectRoot, ".env.backup"),
    };

    // Supabase project configurations
    this.projects = {
      primary: {
        name: "TCO Primary",
        url: "https://qnwcwoutgarhqxlgsjzs.supabase.co",
        anonKey:
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFud2N3b3V0Z2FyaHF4bGdzanpzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY2NzM0MjgsImV4cCI6MjA3MjI0OTQyOH0.nooeC4pyNsoRok5zKat9iwUk9rgCfz_b5SWqZ7_dgtQ",
        serviceRoleKey:
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFud2N3b3V0Z2FyaHF4bGdzanpzIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjY3MzQyOCwiZXhwIjoyMDcyMjQ5NDI4fQ.U_FDgUC__dtFPVd5jrTpmwaWiDWJ701w4lRbe4qy1T4",
        projectId: "qnwcwoutgarhqxlgsjzs",
        accessToken: "sbp_984dfc579739dd6c4ece2bfa74f74a1dcb340206",
      },
    };
  }

  async setupSystemEnvironment() {
    console.log("🔧 Setting up system-level environment variables...");

    try {
      // Set Windows system environment variables for session persistence
      const envVars = {
        SUPABASE_URL: this.projects.primary.url,
        SUPABASE_ANON_KEY: this.projects.primary.anonKey,
        SUPABASE_SERVICE_ROLE_KEY: this.projects.primary.serviceRoleKey,
        SUPABASE_PROJECT_ID: this.projects.primary.projectId,
        SUPABASE_ACCESS_TOKEN: this.projects.primary.accessToken,
      };

      for (const [key, value] of Object.entries(envVars)) {
        await this.setSystemEnvVar(key, value);
      }

      console.log("✅ System environment variables configured");
      return true;
    } catch (error) {
      console.error("❌ Failed to set system environment:", error.message);
      return false;
    }
  }

  async setSystemEnvVar(name, value) {
    return new Promise((resolve, reject) => {
      // Use setx for persistent Windows environment variables
      const command = `setx ${name} "${value}" /M`;

      exec(command, (error, stdout, stderr) => {
        if (error) {
          // Try user-level if system-level fails
          const userCommand = `setx ${name} "${value}"`;
          exec(userCommand, (userError, userStdout, userStderr) => {
            if (userError) {
              reject(new Error(`Failed to set ${name}: ${userError.message}`));
            } else {
              console.log(`✅ Set ${name} (user-level)`);
              resolve();
            }
          });
        } else {
          console.log(`✅ Set ${name} (system-level)`);
          resolve();
        }
      });
    });
  }

  async createProjectEnvFiles() {
    console.log("📄 Creating project environment files...");

    const envContent = this.generateEnvContent();

    try {
      // Create backup of existing .env.local if it exists
      if (fs.existsSync(this.envFiles.local)) {
        fs.copyFileSync(this.envFiles.local, this.envFiles.backup);
        console.log("📦 Backed up existing .env.local");
      }

      // Write new .env.local
      fs.writeFileSync(this.envFiles.local, envContent);
      console.log("✅ Created .env.local with Supabase configuration");

      // Also create .env for compatibility
      fs.writeFileSync(this.envFiles.dev, envContent);
      console.log("✅ Created .env for compatibility");

      return true;
    } catch (error) {
      console.error("❌ Failed to create environment files:", error.message);
      return false;
    }
  }

  generateEnvContent() {
    const project = this.projects.primary;

    return `# Supabase Configuration - Auto-generated by setup-environment.js
# Generated: ${new Date().toISOString()}

# Supabase Project Configuration
SUPABASE_URL=${project.url}
SUPABASE_ANON_KEY=${project.anonKey}
SUPABASE_SERVICE_ROLE_KEY=${project.serviceRoleKey}
SUPABASE_PROJECT_ID=${project.projectId}

# Database Connection
DATABASE_URL=postgresql://postgres:[YOUR-PASSWORD]@db.${project.projectId}.supabase.co:5432/postgres
DIRECT_DATABASE_URL=postgresql://postgres:[YOUR-PASSWORD]@db.${project.projectId}.supabase.co:5432/postgres

# Supabase CLI Access Token
SUPABASE_ACCESS_TOKEN=${project.accessToken}

# Next.js Configuration
NEXT_PUBLIC_SUPABASE_URL=${project.url}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${project.anonKey}

# Development Settings
NODE_ENV=development
NEXT_PUBLIC_SITE_URL=http://localhost:3000
`;
  }

  async validateEnvironment() {
    console.log("🔍 Validating environment configuration...");

    const checks = [
      {
        name: "System SUPABASE_URL",
        check: () => process.env.SUPABASE_URL === this.projects.primary.url,
      },
      {
        name: "System SUPABASE_ACCESS_TOKEN",
        check: () => process.env.SUPABASE_ACCESS_TOKEN === this.projects.primary.accessToken,
      },
      { name: ".env.local exists", check: () => fs.existsSync(this.envFiles.local) },
      { name: ".env exists", check: () => fs.existsSync(this.envFiles.dev) },
    ];

    let allValid = true;
    for (const { name, check } of checks) {
      const isValid = check();
      console.log(`${isValid ? "✅" : "❌"} ${name}`);
      if (!isValid) allValid = false;
    }

    return allValid;
  }

  async setupSessionPersistence() {
    console.log("🔄 Setting up session persistence...");

    try {
      // Create PowerShell profile script for session restoration
      const profileScript = this.generateProfileScript();
      const profilePath = path.join(
        os.homedir(),
        "Documents",
        "WindowsPowerShell",
        "supabase-session.ps1"
      );

      // Ensure directory exists
      const profileDir = path.dirname(profilePath);
      if (!fs.existsSync(profileDir)) {
        fs.mkdirSync(profileDir, { recursive: true });
      }

      fs.writeFileSync(profilePath, profileScript);
      console.log("✅ Created PowerShell session persistence script");

      // Create batch file for easy session restoration
      const batchScript = `@echo off
echo Restoring Supabase session environment...
powershell -ExecutionPolicy Bypass -File "${profilePath}"
echo Session environment restored!
`;

      const batchPath = path.join(this.projectRoot, "restore-supabase-session.bat");
      fs.writeFileSync(batchPath, batchScript);
      console.log("✅ Created session restoration batch file");

      return true;
    } catch (error) {
      console.error("❌ Failed to setup session persistence:", error.message);
      return false;
    }
  }

  generateProfileScript() {
    const project = this.projects.primary;

    return `# Supabase Session Restoration Script
# Auto-restore environment variables for persistent sessions

$env:SUPABASE_URL = "${project.url}"
$env:SUPABASE_ANON_KEY = "${project.anonKey}"
$env:SUPABASE_SERVICE_ROLE_KEY = "${project.serviceRoleKey}"
$env:SUPABASE_PROJECT_ID = "${project.projectId}"
$env:SUPABASE_ACCESS_TOKEN = "${project.accessToken}"

Write-Host "✅ Supabase environment variables restored" -ForegroundColor Green
Write-Host "🔗 Project: ${project.url}" -ForegroundColor Cyan
Write-Host "📍 ID: ${project.projectId}" -ForegroundColor Cyan
`;
  }

  async run() {
    console.log("🚀 Starting Supabase Environment Setup...");
    console.log("=====================================");

    const steps = [
      { name: "Setup system environment", fn: () => this.setupSystemEnvironment() },
      { name: "Create project environment files", fn: () => this.createProjectEnvFiles() },
      { name: "Setup session persistence", fn: () => this.setupSessionPersistence() },
      { name: "Validate environment", fn: () => this.validateEnvironment() },
    ];

    let allSuccess = true;
    for (const { name, fn } of steps) {
      console.log(`\n📋 ${name}...`);
      const success = await fn();
      if (!success) {
        allSuccess = false;
        console.log(`❌ Failed: ${name}`);
      }
    }

    console.log("\n=====================================");
    if (allSuccess) {
      console.log("🎉 Supabase environment setup completed successfully!");
      console.log("\n📋 Next Steps:");
      console.log("1. Restart your terminal to load new environment variables");
      console.log("2. Run: npm run dev");
      console.log("3. Test Supabase connection with test-supabase-connection.js");
    } else {
      console.log("❌ Some setup steps failed. Check the logs above.");
    }

    return allSuccess;
  }
}

// Run if called directly
if (require.main === module) {
  const manager = new SupabaseEnvironmentManager();
  manager.run().catch(console.error);
}

module.exports = SupabaseEnvironmentManager;
