"use client";

import { useCallback, useEffect } from "react";
import { usePathname, useSearchParams } from "next/navigation";
import { analytics } from "@/lib/analytics";
import { useAuth } from "@/contexts/AuthContext";

export function AnalyticsClient() {
  const pathname = usePathname();
  const search = useSearchParams();
  const { user } = useAuth();

  const scheduleIdle = useCallback((callback: () => void) => {
    if (typeof window === "undefined") {
      return;
    }
    const idleWindow = window as Window &
      typeof globalThis & {
        requestIdleCallback?: (cb: IdleRequestCallback, options?: IdleRequestOptions) => number;
      };
    const requestIdle = idleWindow.requestIdleCallback;
    if (typeof requestIdle === "function") {
      requestIdle(
        () => {
          callback();
        },
        { timeout: 500 }
      );
      return;
    }
    window.setTimeout(callback, 300);
  }, []);

  // Init + identify
  useEffect(() => {
    scheduleIdle(() => {
      void analytics.init();
    });
  }, [scheduleIdle]);

  useEffect(() => {
    if (!user?.id) {
      return;
    }
    scheduleIdle(() => {
      void analytics.identify(user.id, { email: user.email ?? undefined });
    });
  }, [scheduleIdle, user?.email, user?.id]);

  // Capture pageviews on route changes
  useEffect(() => {
    const query = search?.toString();
    const path = pathname ? (query ? ? : pathname) : undefined;
    scheduleIdle(() => {
      void analytics.pageview(path);
    });
  }, [pathname, scheduleIdle, search]);

  return null;
}
