// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/admin/questions" | "/analytics" | "/analytics/events" | "/assessments" | "/auth" | "/auth/signin" | "/auth/signup" | "/beginner" | "/dashboard" | "/domains/[domain]" | "/drills" | "/exam" | "/guides" | "/kb" | "/labs" | "/learn" | "/learn/[slug]" | "/learn/query-builder" | "/lighthouse-test" | "/mdx-test" | "/mock" | "/mock-exam" | "/modules" | "/modules/[slug]" | "/modules/server" | "/notes" | "/perf-test" | "/practice" | "/pricing" | "/profile" | "/progress" | "/review" | "/search" | "/settings" | "/simple" | "/simulator" | "/study" | "/study/[domain]" | "/study/review" | "/team" | "/test" | "/test-db" | "/test-mdx" | "/test-minimal" | "/videos" | "/videos/[slug]" | "/videos/admin" | "/welcome"
type AppRouteHandlerRoutes = "/api/health" | "/api/sim-eval" | "/api/sim-meta" | "/api/sim-run" | "/api/sim-save" | "/api/sim-saved" | "/api/stripe/create-checkout-session" | "/api/study/content"
type PageRoutes = never
type LayoutRoutes = "/" | "/learn" | "/learning" | "/study" | "/test-minimal"
type RedirectRoutes = "/exam" | "/tanium/exam"
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/admin/questions": {}
  "/analytics": {}
  "/analytics/events": {}
  "/api/health": {}
  "/api/sim-eval": {}
  "/api/sim-meta": {}
  "/api/sim-run": {}
  "/api/sim-save": {}
  "/api/sim-saved": {}
  "/api/stripe/create-checkout-session": {}
  "/api/study/content": {}
  "/assessments": {}
  "/auth": {}
  "/auth/signin": {}
  "/auth/signup": {}
  "/beginner": {}
  "/dashboard": {}
  "/domains/[domain]": { "domain": string; }
  "/drills": {}
  "/exam": {}
  "/guides": {}
  "/kb": {}
  "/labs": {}
  "/learn": {}
  "/learn/[slug]": { "slug": string; }
  "/learn/query-builder": {}
  "/learning": {}
  "/lighthouse-test": {}
  "/mdx-test": {}
  "/mock": {}
  "/mock-exam": {}
  "/modules": {}
  "/modules/[slug]": { "slug": string; }
  "/modules/server": {}
  "/notes": {}
  "/perf-test": {}
  "/practice": {}
  "/pricing": {}
  "/profile": {}
  "/progress": {}
  "/review": {}
  "/search": {}
  "/settings": {}
  "/simple": {}
  "/simulator": {}
  "/study": {}
  "/study/[domain]": { "domain": string; }
  "/study/review": {}
  "/tanium/exam": {}
  "/team": {}
  "/test": {}
  "/test-db": {}
  "/test-mdx": {}
  "/test-minimal": {}
  "/videos": {}
  "/videos/[slug]": { "slug": string; }
  "/videos/admin": {}
  "/welcome": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/learn": never
  "/learning": never
  "/study": never
  "/test-minimal": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
