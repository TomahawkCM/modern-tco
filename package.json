{
  "name": "tanium-tco-modern",
  "version": "1.0.0",
  "description": "Modern Tanium Certified Operator Exam System",
  "private": true,
  "scripts": {
    "dev": "cross-env NODE_OPTIONS=--max-old-space-size=8192 UV_THREADPOOL_SIZE=12 next dev --turbopack",
    "dev:basic": "cross-env NODE_OPTIONS=--max-old-space-size=6144 next dev",
    "dev:port": "cross-env NODE_OPTIONS=--max-old-space-size=6144 next dev --port 3007",
    "dev:safe": "cross-env NODE_OPTIONS=--max-old-space-size=2048 next dev",
    "dev:gpu": "cross-env NODE_OPTIONS=--max-old-space-size=6144 CUDA_VISIBLE_DEVICES=0 GPU_ACCELERATION=true next dev",
    "build": "node scripts/generate-sitemap.js && cross-env NODE_OPTIONS=--max-old-space-size=16384 UV_THREADPOOL_SIZE=12 next build",
    "build:gpu": "cross-env NODE_OPTIONS=--max-old-space-size=8192 CUDA_VISIBLE_DEVICES=0 GPU_ACCELERATION=true next build",
    "start": "next start",
    "prepare": "husky || true",
    "lint": "ESLINT_USE_FLAT_CONFIG=false eslint src --max-warnings 9999 --cache --rule \"@typescript-eslint/no-explicit-any: off\" --rule \"@typescript-eslint/ban-ts-comment: warn\" --rule \"react-hooks/exhaustive-deps: off\"",
    "lint:quick": "ESLINT_USE_FLAT_CONFIG=false eslint src --max-warnings 9999 --rule \"@typescript-eslint/no-explicit-any: off\" --rule \"@typescript-eslint/ban-ts-comment: warn\" --rule \"react-hooks/exhaustive-deps: off\"",
    "lint:fix": "ESLINT_USE_FLAT_CONFIG=false eslint src --fix --cache --rule \"@typescript-eslint/no-explicit-any: off\" --rule \"@typescript-eslint/ban-ts-comment: warn\" --rule \"react-hooks/exhaustive-deps: off\"",
    "lint:fix-all": "eslint . --fix --cache && prettier --write .",
    "lint:pwsh": "cross-env NODE_ENV=development eslint src --max-warnings 9999 --cache --rule \"@typescript-eslint/no-explicit-any: off\" --rule \"@typescript-eslint/ban-ts-comment: warn\" --rule \"react-hooks/exhaustive-deps: off\"",
    "lint:fix:pwsh": "cross-env NODE_ENV=development eslint src --fix --cache --rule \"@typescript-eslint/no-explicit-any: off\" --rule \"@typescript-eslint/ban-ts-comment: warn\" --rule \"react-hooks/exhaustive-deps: off\"",
    "lint:check:pwsh": "cross-env NODE_ENV=development eslint src --max-warnings 9999 --cache --quiet --rule \"@typescript-eslint/no-explicit-any: off\" --rule \"@typescript-eslint/ban-ts-comment: warn\" --rule \"react-hooks/exhaustive-deps: off\"",
    "lint:check": "ESLINT_USE_FLAT_CONFIG=false eslint src --max-warnings 9999 --cache --quiet --rule \"@typescript-eslint/no-explicit-any: off\" --rule \"@typescript-eslint/ban-ts-comment: warn\" --rule \"react-hooks/exhaustive-deps: off\"",
    "lint:perf": "cross-env TIMING=1 eslint .",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "format:pwsh": "cross-env prettier --write . --end-of-line auto",
    "format:check:pwsh": "cross-env prettier --check . --end-of-line auto",
    "check-types": "tsc --noEmit",
    "type-coverage": "type-coverage --detail --strict",
    "type-coverage:report": "type-coverage --detail --strict --reportFileSuffix .html",
    "check-all": "npm run check-types && npm run lint && npm run type-coverage",
    "fix-all": "npm run format && npm run lint:fix",
    "quality-check": "npm run check-types && npm run lint && npm run type-coverage && npm run test",
    "quality:pwsh": "npm run typecheck && npm run lint:pwsh && npm run format:check:pwsh",
    "fix:pwsh": "npm run format:pwsh && npm run lint:fix:pwsh",
    "dev:check": "concurrently \"npm run typecheck -- --watch\" \"npm run lint -- --cache\"",
    "dev:fix": "npm run format && npm run lint:fix && npm run typecheck",
    "dev:clean": "rimraf .next node_modules/.cache .eslintcache",
    "dev:reset": "npm run dev:clean && npm install",
    "check:all-parallel": "concurrently \"npm run typecheck\" \"npm run lint:check\" \"npm run format:check\"",
    "pre-commit-check": "npm run typecheck && npm run lint:check && npm run format:check",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:jest": "jest",
    "test:vitest": "vitest run --reporter=default",
    "test:vitest:ui": "vitest --ui",
    "test:all": "npm run test:jest && npm run test:vitest",
    "codex:mcp": "node scripts/codex-run-mcp.js",
    "codex:mcp:sync": "node scripts/codex-sync-mcp.js",
    "codex:mcp:sync:global": "node scripts/codex-sync-mcp.js --with-env --force",
    "setup:chrome": "bash ./scripts/setup-chrome-for-testing.sh",
    "mcp:devtools": "node ./scripts/mcp-devtools-launch.js",
    "typecheck": "tsc --noEmit",
    "lighthouse": "node scripts/lighthouse.mjs http://127.0.0.1:3000 /welcome /practice /mock /review",
    "lighthouse:3001": "node scripts/lighthouse.mjs http://127.0.0.1:3001 /welcome /practice /mock /review",
    "lighthouse:quick": "CHROME_PATH=/home/robne/.cache/ms-playwright/chromium-1193/chrome-linux/chrome npx lighthouse http://localhost:3001 --chrome-flags='--headless --no-sandbox --disable-dev-shm-usage --disable-features=BlockInsecurePrivateNetworkRequests' --preset=desktop --quiet --output=json --output-path=./reports/lighthouse-quick",
    "lighthouse:all": "CHROME_PATH=/home/robne/.cache/ms-playwright/chromium-1193/chrome-linux/chrome node scripts/lighthouse-all-routes.mjs",
    "lighthouse:ci": "lhci autorun",
    "dev:3001": "PORT=3001 next dev",
    "test:db": "node scripts/verify-postgresql-schema.js",
    "db:setup": "echo 'Please create PostgreSQL schema manually in Supabase SQL Editor - see docs/POSTGRESQL_SCHEMA_SETUP.md'",
    "db:verify": "node scripts/verify-postgresql-schema.js",
    "db:migrate": "node scripts/run-native-postgresql.js",
    "db:seed": "npm run db:migrate",
    "db:deploy": "node scripts/deploy-schema-simple.js",
    "db:apply-sql": "tsx scripts/apply-sql.ts",
    "db:apply-sql:api": "tsx scripts/apply-sql-via-api.ts",
    "db:apply-migrations": "tsx scripts/apply-migrations.ts",
    "perf:lighthouse": "node scripts/lighthouse.mjs http://127.0.0.1:3000 /welcome /practice /mock /review",
    "lighthouse:3001:pw": "CHROME_PATH=$(node -e \"try{console.log(require('playwright').chromium.executablePath())}catch{console.log('')}\") node scripts/lighthouse.mjs http://127.0.0.1:3001 /welcome /practice /mock /review",
    "lighthouse:3003": "node scripts/lighthouse.mjs http://127.0.0.1:3003 /welcome /practice /mock /review",
    "lighthouse:setup": "npx playwright install chromium",
    "lighthouse:3003:pw": "CHROME_PATH=$(node -e \"try{console.log(require('playwright').chromium.executablePath())}catch{console.log('')}\") node scripts/lighthouse.mjs http://127.0.0.1:3003 /welcome /practice /mock /review",
    "lighthouse:summary": "node scripts/lighthouse-summary.mjs",
    "db:apply-analytics-labs": "tsx scripts/apply-sql.ts --file supabase/migrations/20250920090000_add_analytics_and_lab_tables.sql",
    "db:check-new-tables": "node scripts/check-new-tables.js",
    "content:migrate": "node scripts/run-native-postgresql.js",
    "content:verify": "node scripts/verify-postgresql-schema.js",
    "content:seed:modules": "tsx scripts/seed-modules-from-mdx-enhanced.ts",
    "db:migrate:add-mdx-id": "tsx scripts/apply-sql.ts --file supabase/migrations/20250927_add_mdx_id_to_study_modules.sql",
    "content:link:relationships": "tsx scripts/link-relationships.ts",
    "content:test-progress": "tsx scripts/test-progress.ts",
    "content:stats": "tsx scripts/report-question-stats.ts",
    "content:import-json": "tsx scripts/import-questions-from-json.ts",
    "content:seed": "tsx scripts/seed-questions.ts",
    "postgresql:setup": "echo 'Run: 1) Manual schema creation, 2) npm run db:verify, 3) npm run content:migrate'",
    "migrate:content": "node scripts/migrate-comprehensive-content.js",
    "migrate:schema": "node scripts/run-supabase-migrations.js",
    "check:tables": "node scripts/check-database-tables.js",
    "create:tables": "node scripts/create-tables-api.js",
    "pipeline:auto": "node scripts/auto-create-pipeline.js",
    "generate-questions": "tsx src/scripts/generate-questions.ts",
    "validate-questions": "tsx src/scripts/validate-questions.ts",
    "task:init": "node scripts/tasks/task-cli.js init",
    "task:add": "node scripts/tasks/task-cli.js add",
    "task:update": "node scripts/tasks/task-cli.js update",
    "task:list": "node scripts/tasks/task-cli.js list",
    "task:show": "node scripts/tasks/task-cli.js show",
    "e2e": "playwright test -c tests/e2e/playwright.config.ts",
    "task:complete": "node scripts/tasks/task-cli.js complete",
    "task:progress": "node scripts/tasks/task-cli.js progress",
    "task:status": "node scripts/tasks/task-cli.js status",
    "task:export": "node scripts/tasks/task-cli.js export",
    "migration:status": "node scripts/migration-tracker.js status",
    "migration:list": "node scripts/migration-tracker.js list",
    "migration:complete": "node scripts/migration-tracker.js complete",
    "migration:start": "node scripts/migration-tracker.js start",
    "migration:backup": "node scripts/migration-tracker.js backup",
    "migration:continue": "node scripts/migration-tracker.js continue",
    "migrate:to-production": "tsx scripts/migrateToDatabaseQuestions.ts",
    "generate:production-questions": "tsx scripts/generateProductionQuestions.ts",
    "db:seed-production": "supabase db reset && cat supabase/seed.sql | supabase db reset --linked",
    "validate:question-database": "tsx scripts/validate-question-database.ts",
    "test:migration-compatibility": "tsx -e \"import { getAllQuestions as legacyFn } from './src/lib/questionLoader'; import { questionService } from './src/lib/questionService'; Promise.all([legacyFn(), questionService.getAllQuestions()]).then(([legacy, db]) => console.log('Legacy:', legacy.length, 'DB:', db.length))\"",
    "kb:apply-schema": "tsx scripts/kb-apply-schema.ts",
    "kb:setup-public": "tsx scripts/kb-setup-public.ts",
    "kb:import-lessons": "tsx scripts/kb-import.ts",
    "kb:export-lessons": "tsx scripts/kb-export-lessons.ts",
    "kb:import-rest": "tsx scripts/kb-import-rest.ts",
    "kb:check": "node scripts/check-kb-tables.js",
    "kb:init": "npm-run-all2 -s kb:setup-public kb:import-rest kb:check",
    "mcp:verify": "node scripts/verify-mcp-setup.js",
    "mcp:status": "node scripts/verify-mcp-setup.js",
    "setup:mcp": "npm run mcp:verify && echo '⚡ MCP setup verified! Restart Claude Code to use optimized configuration.'"
  },
  "dependencies": {
    "@anthropic-ai/bedrock-sdk": "^0.24.0",
    "@anthropic-ai/sdk": "^0.60.0",
    "@anthropic-ai/tokenizer": "^0.0.4",
    "@hookform/resolvers": "^5.2.1",
    "@mdx-js/loader": "^3.1.1",
    "@mdx-js/react": "^3.1.1",
    "@monaco-editor/react": "^4.7.0",
    "@next/mdx": "^15.5.2",
    "@paralleldrive/cuid2": "^2.2.2",
    "@radix-ui/react-accordion": "^1.2.12",
    "@radix-ui/react-alert-dialog": "^1.1.15",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.3",
    "@radix-ui/react-collapsible": "^1.1.12",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-hover-card": "^1.1.15",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.16",
    "@radix-ui/react-navigation-menu": "^1.2.14",
    "@radix-ui/react-popover": "^1.1.15",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.8",
    "@radix-ui/react-scroll-area": "^1.2.10",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toast": "^1.2.15",
    "@radix-ui/react-toggle": "^1.1.10",
    "@radix-ui/react-toggle-group": "^1.1.11",
    "@radix-ui/react-tooltip": "^1.2.8",
    "@supabase/ssr": "^0.7.0",
    "@tabler/icons-react": "^3.34.1",
    "@tanstack/react-table": "^8.20.5",
    "@tsparticles/engine": "^3.9.1",
    "@tsparticles/react": "^3.0.0",
    "@tsparticles/slim": "^3.9.1",
    "@types/node": "^24.3.0",
    "@types/pg": "^8.15.5",
    "@types/react-dom": "^18.0.0",
    "autoprefixer": "^10.4.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "cmdk": "^1.1.1",
    "commander": "^14.0.0",
    "critters": "^0.0.23",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.6.0",
    "framer-motion": "^12.23.12",
    "glob": "^11.0.3",
    "gray-matter": "^4.0.3",
    "isomorphic-dompurify": "^2.28.0",
    "lucide-react": "^0.542.0",
    "monaco-editor": "^0.52.0",
    "motion": "^12.23.12",
    "next": "15.5.4",
    "next-mdx-remote": "^5.0.0",
    "next-themes": "^0.4.6",
    "pg": "^8.16.3",
    "postcss": "^8.4.0",
    "postgres": "^3.4.7",
    "posthog-node": "^5.9.1",
    "react": "^18.0.0",
    "react-day-picker": "^9.9.0",
    "react-dom": "^18.0.0",
    "react-hook-form": "^7.62.0",
    "react-is": "^18.2.0",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^2.0.20",
    "recharts": "^3.1.2",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^3.3.0",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.9.2",
    "vite": "^7.1.6",
    "zod": "^4.1.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.35.0",
    "@next/eslint-plugin-next": "^15.5.2",
    "@playwright/test": "^1.55.1",
    "@supabase/supabase-js": "^2.57.0",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@types/jest": "^30.0.0",
    "@types/react-devtools": "^3.6.2",
    "@types/testing-library__jest-dom": "^5.14.9",
    "@typescript-eslint/eslint-plugin": "^8.44.0",
    "@typescript-eslint/parser": "^8.44.0",
    "@typescript-eslint/typescript-estree": "^8.44.0",
    "@vitejs/plugin-react": "^4.3.4",
    "concurrently": "^9.1.0",
    "cross-env": "^10.0.0",
    "dotenv": "^17.2.2",
    "eslint": "^9.35.0",
    "eslint-config-next": "^15.5.2",
    "eslint-config-prettier": "^10.1.8",
    "eslint-formatter-codeframe": "^7.32.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^5.5.4",
    "eslint-plugin-react-hooks": "^5.0.0",
    "jest": "^30.1.3",
    "jest-environment-jsdom": "^30.1.2",
    "jsdom": "^25.0.1",
    "lighthouse": "^12.8.2",
    "lint-staged": "^15.2.11",
    "npm-run-all2": "^7.0.1",
    "playwright": "^1.55.1",
    "prettier": "^3.6.2",
    "prettier-plugin-tailwindcss": "^0.6.14",
    "puppeteer": "^24.22.3",
    "rimraf": "^6.0.1",
    "shadcn": "^3.2.1",
    "ts-jest": "^29.4.1",
    "tsx": "^4.19.2",
    "type-coverage": "^2.29.7",
    "typescript-eslint": "^8.44.0",
    "vitest": "^3.2.4"
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix --cache",
      "prettier --write"
    ],
    "*.{js,jsx}": [
      "eslint --fix --cache",
      "prettier --write"
    ],
    "*.{json,md,css}": [
      "prettier --write"
    ]
  }
}
