        sectionsCompleted: ["obj-1"],
        currentSection: "section-1",
        totalTimeSpent: 300,
        lastAccessedAt: new Date(),
      });

      // Wait for save
      await new Promise((resolve) => setTimeout(resolve, 1000));

      updateTestResult("Module Context", "success", "Module progress sync working", {
        modulesCount:
          moduleState && (moduleState as any).moduleProgress
            ? Object.keys((moduleState as any).moduleProgress).length
            : 0,
      });
      return true;
    } catch (error) {
      updateTestResult("Module Context", "error", String(error));
      return false;
    }
  };

  const testQuestionsContext = async () => {
    updateTestResult("Questions Context", "testing");
    try {
      // Questions are loaded from Supabase automatically
      if (!questionsData || questionsData.length === 0) {
        throw new Error("No questions loaded from database");
      }

      updateTestResult("Questions Context", "success", `Loaded ${questionsData.length} questions`, {
        totalQuestions: questionsData.length,
        isLoading: questionsLoading,
      });
      return true;
    } catch (error) {
      updateTestResult("Questions Context", "error", String(error));
      return false;
    }
  };

  const testSearchContext = async () => {
    updateTestResult("Search Context", "testing");
    try {
      // Test search functionality
      const results = await performSearch();

      const resultCount = Array.isArray(results) ? results.length : 0;
      updateTestResult("Search Context", "success", `Search returned ${resultCount} results`, {
        resultsCount: resultCount,
      });
      return true;
    } catch (error) {
      updateTestResult("Search Context", "error", String(error));
      return false;
    }
  };

  const runAllTests = async () => {
    setIsRunning(true);

    // Reset all test results
    setTestResults((prev) =>
      prev.map((test) => ({ ...test, status: "pending", message: undefined, details: undefined }))
    );

    // Run tests in sequence
    const authOk = await testAuthentication();
    if (!authOk) {
      setIsRunning(false);
      return;
    }

    const dbOk = await testDatabaseConnection();
    if (!dbOk) {
      setIsRunning(false);
      return;
    }

    // Run remaining tests
    await testSettingsContext();
    await testProgressContext();
    await testIncorrectAnswersContext();
    await testModuleContext();
    await testQuestionsContext();
    await testSearchContext();

    setIsRunning(false);
  };

  const getStatusIcon = (status: TestResult["status"]) => {
    switch (status) {
      case "success":
        return <CheckCircle2 className="h-5 w-5 text-green-400" />;
      case "error":
        return <XCircle className="h-5 w-5 text-red-400" />;
      case "testing":
        return <Loader2 className="h-5 w-5 animate-spin text-blue-400" />;
      default:
        return <AlertCircle className="h-5 w-5 text-gray-400" />;
    }
  };

  const getStatusBadge = (status: TestResult["status"]) => {
    const variants = {
      success: "bg-green-500/20 text-green-300",
      error: "bg-red-500/20 text-red-300",
      testing: "bg-blue-500/20 text-blue-300",
      pending: "bg-gray-500/20 text-gray-300",
    };

    return <Badge className={cn("ml-auto", variants[status])}>{status}</Badge>;
  };

  return (
    <MainLayout>
      <div className="container mx-auto max-w-6xl px-4 py-8">
        <div className="mb-8">
          <h1 className="mb-4 text-4xl font-bold text-white">Database Integration Test</h1>
          <p className="text-white/70">Verify all database connections and context integrations</p>
        </div>

        {/* Authentication Status */}
        <Card className="glass mb-6 border-white/10">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <User className="h-5 w-5" />
              Authentication Status
            </CardTitle>
          </CardHeader>
          <CardContent>
            {user ? (
              <div className="space-y-2">
                <Alert className="border-green-500/30 bg-green-500/10">
                  <CheckCircle2 className="h-4 w-4 text-green-400" />
                  <AlertDescription className="text-white">
                    Signed in as <strong>{user.email}</strong>
                  </AlertDescription>
                </Alert>
                <Button
                  onClick={signOut}
                  variant="outline"
                  className="border-white/20 text-white hover:bg-white/10"
                >
                  Sign Out
                </Button>
              </div>
            ) : (
              <div className="space-y-2">
                <Alert className="border-yellow-500/30 bg-yellow-500/10">
                  <AlertCircle className="h-4 w-4 text-yellow-400" />
                  <AlertDescription className="text-white">
                    Not authenticated. Sign in to test database features.
                  </AlertDescription>
                </Alert>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Test Controls */}
        <Card className="glass mb-6 border-white/10">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-white">
              <Database className="h-5 w-5" />
              Test Controls
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex gap-4">
              <Button
                onClick={runAllTests}
                disabled={!user || isRunning}
                className="bg-tanium-accent hover:bg-tanium-accent/80"
              >
                {isRunning ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Running Tests...
                  </>
                ) : (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4" />
                    Run All Tests
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Test Results */}
        <Card className="glass border-white/10">
          <CardHeader>
            <CardTitle className="text-white">Test Results</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {testResults.map((test) => (
                <div key={test.name} className="flex items-start gap-3 rounded-lg bg-white/5 p-3">
                  {getStatusIcon(test.status)}
                  <div className="flex-1">
                    <div className="flex items-center">
                      <h3 className="font-medium text-white">{test.name}</h3>
                      {getStatusBadge(test.status)}
                    </div>
                    {test.message && <p className="mt-1 text-sm text-white/70">{test.message}</p>}
                    {test.details && (
                      <pre className="mt-2 rounded bg-black/20 p-2 text-xs text-white/50">
                        {JSON.stringify(test.details, null, 2)}
                      </pre>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </MainLayout>
